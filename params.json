{"name":"NOPAR","tagline":"Node PAckage Registry","body":"Provides a local NPM registry that also proxies and caches unknown node packages\r\nfrom the original npm registry at <http://registry.npmjs.org>.\r\n\r\n[![Build Status](https://travis-ci.org/afbobak/nopar.png)](https://travis-ci.org/afbobak/nopar)\r\n\r\nInstall the server\r\n------------------\r\n\r\nIt's available from the official NPM registry, so all you need is:\r\n\r\n    npm install -g nopar\r\n\r\nOn my build server I create an archive (see ``scripts/package``) and extract the\r\nwhole shebang into ``/usr/local/nopar`` with an install script\r\n(see ``scripts/install-nopar.sh``).\r\n\r\n\r\nUsage\r\n-----\r\n\r\nIf you installed NOPAR via ``npm install` -g nopar`, then a start script is be\r\ninstalled into your path and you can simply run:\r\n\r\nRun:\r\n\r\n    nopar\r\n\r\nWith the default configuration, the registry is available at\r\n<http://localhost:5984/>. Point your browser at it and you should see an empty\r\nregistry.\r\n\r\nFill your local registry by configuring the\r\n[npm command](https://npmjs.org/doc/config.html) to use it:\r\n\r\n    npm config set registry http://localhost:5984/\r\n    npm cache clear\r\n    npm login\r\n\r\nSometimes npm seems confused with cached packages from other repositories,\r\nclearing the cache remedies those issues.\r\n\r\nThe login is required for npm to work but NOPAR doesn't implement any user\r\nmanagement and currently accepts everyone.\r\n\r\nInstall packages with ``npm install PACKAGE`` and NOPAR will automatically proxy\r\nand cache the packages and dependencies into your private NOPAR.\r\n\r\nOf course you can also publish to NOPAR. Those packages won't get promoted to\r\nthe official [registry](http://registry.npmjs.org/) by NOPAR and will be marked\r\nwith a green \"local\" tag in the browser interface.\r\n\r\nFor configuring the registry, see the section \"Default Environment Variables\"\r\nbelow.\r\n\r\n\r\nDefault Environment Variables\r\n-----------------------------\r\n\r\nThe service's defaults are configured via environment variables. The following\r\nparameters are available:\r\n\r\n* NOPAR_HOSTNAME - Hostname that the service is bound to (default=\"localhost\")\r\n* NOPAR_PORT - TCP port the service is running on (default=5984)\r\n* NOPAR_AUTO_FORWARD - \"yes\" if NOPAR should automatically forward requests for\r\n  unknown packages to the forwarder registry, \"no\" if you really just want a\r\n  local registry without the auto-caching facility (default=\"yes\")\r\n* NOPAR_FORWARDER_URL - The URL of the registry NOPAR forwards requests for\r\n  unknown packages to (default=\"https://registry.npmjs.org\")\r\n* NOPAR_PROXY_URL - The URL of a proxy to use, empty for not using a proxy\r\n  (default=\"\")\r\n* NOPAR_USER_AGENT - The user agent to use to make the requests as\r\n  (default=nopar/<nopar-version>)\r\n* NOPAR_LOGFILE - Location of the logfile if we spawn, empty for console\r\n  (default=\"\")\r\n* NOPAR_LOGLEVEL - Loglevel to use (default=\"info\")\r\n* NOPAR_REGISTRY_PATH - Location of the registry, leaving this empty will put\r\n  the registry in a folder \"registry\" inside the nopar folder (default=\"\")\r\n* NOPAR_HOME - Homefolder to change to before running, empty for installation\r\n  location (default=\"\")\r\n* NOPAR_RUN_PATH - Location for runtime files, primarily the PID file if running\r\n  as a daemon (default=\"\")\r\n* NOPAR_RUNAS_USER - The user to run as if running as a daemon, empty for not\r\n  running as a daemon (default=\"\")\r\n\r\nIf the environment variable ``NOPAR_RUNAS_USER`` is set, the service will run\r\nas a daemon.\r\n\r\nYou can override some of those settings from within NOPAR on the Settings page.\r\nEverything that is set in the Settings page takes priority over the environment\r\nvariables.\r\n\r\nUpstart Configuration\r\n---------------------\r\n\r\nThere's an example [upstart](http://upstart.ubuntu.com) configuration file that\r\nyou can use and adapt for your own purpose:\r\n\r\n``scripts/nopar.conf``\r\n\r\nKnown Issues\r\n------------\r\n\r\n* Missing user management. Welcome to the \"Admin Party\"!\r\n* Once a package meta is cached, it doesn't get updated from the\r\n  [upstream registry](http://registry.npmjs.org) automatically. You can refresh\r\n  the package meta from the [upstream registry](http://registry.npmjs.org) by\r\n  clicking on the \"Refresh\" link for that package in the user interface.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}