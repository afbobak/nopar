{"name":"NOPAR","tagline":"Node PAckage Registry","body":"NOPAR - The Node PAckage Registry & proxy\r\n=========================================\r\n\r\nProvides a local NPM registry that also proxies and caches unknown node packages\r\nfrom the original npm registry at <http://registry.npmjs.org>.\r\n\r\n[![Build Status](https://travis-ci.org/afbobak/nopar.png)](https://travis-ci.org/afbobak/nopar)\r\n\r\nInstall the server\r\n------------------\r\n\r\nIt's available from the official NPM registry, so all you need is:\r\n\r\n    npm install -g nopar\r\n\r\nOn my build server I create an archive (see ``scripts/package``) and extract the\r\nwhole shebang into ``/usr/local/nopar`` with an install script\r\n(see ``scripts/install-nopar.sh``).\r\n\r\n\r\nUsage\r\n-----\r\n\r\nA start script should be installed into your path If you installed NOPAR via\r\n``npm install` -g nopar`.\r\n\r\nRun:\r\n\r\n    nopar\r\n\r\nand your registry is available at <http://localhost:5984/>. Point your browser\r\nat it and you should see an empty registry.\r\n\r\nFill your local registry by configuring the\r\n[npm command](https://npmjs.org/doc/config.html) to use it:\r\n\r\n    npm config set registry http://localhost:5984/\r\n    npm cache clear\r\n    npm login\r\n\r\nSometimes npm seems confused with cached packages from other repositories,\r\nclearing the cache remedies those issues.\r\n\r\nThe login is required for npm to work but NOPAR doesn't implement any user\r\nmanagement and currently accepts everything.\r\n\r\nInstall packages with ``npm install PACKAGE`` and NOPAR will automatically proxy\r\nand cache the packages and dependencies into your private NOPAR.\r\n\r\nOf course you can also publish to NOPAR. Those packages won't get promoted to\r\nthe official [registry](http://registry.npmjs.org/) by NOPAR and will be marked\r\nwith a green \"local\" tag in the browser interface.\r\n\r\nFor configuring the registry, see the section \"Default Environment Variables\"\r\nbelow.\r\n\r\n\r\nDefault Environment Variables\r\n-----------------------------\r\n\r\nThe service is configured via environment variables. The following parameters\r\nare available:\r\n\r\n* NOPAR_HOSTNAME=localhost\r\n* NOPAR_PORT=5984\r\n* NOPAR_AUTO_FORWARD=yes\r\n* NOPAR_FORWARDER_URL=\"https://registry.npmjs.org\"\r\n* NOPAR_PROXY_URL=\r\n* NOPAR_USER_AGENT=nopar/0.0.0\r\n* NOPAR_LOGFILE=\r\n* NOPAR_LOGLEVEL=info\r\n* NOPAR_REGISTRY_PATH=\r\n* NOPAR_HOME=\r\n* NOPAR_RUN_PATH=\r\n* NOPAR_RUNAS_USER=\r\n\r\nIf the environment variable ``NOPAR_RUNAS_USER`` is set, the service will run\r\nas a daemon.\r\n\r\nYou can override the environment variables from within the Settings page inside\r\nNOPAR.\r\n\r\nUpstart Configuration\r\n---------------------\r\n\r\nThere's an example [upstart](http://upstart.ubuntu.com) configuration file that\r\nyou can use and adapt for your own purpose:\r\n\r\n``scripts/nopar.conf``\r\n\r\nKnown Issues\r\n------------\r\n\r\n* Missing user management. Welcome to the \"Admin Party\"!\r\n* Once a package meta is cached, it doesn't get updated from the\r\n  [upstream registry](http://registry.npmjs.org) automatically. The workaround\r\n  for now is to delete the cached package via the browser interface and do a\r\n  fresh ``npm install`` of said package.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}